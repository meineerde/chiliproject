# Autogenerated from a Treetop grammar. Edits may be lost.


module ChiliProject
  module QueryLanguage
    module QueryLanguage
      include Treetop::Runtime

      def root
        @root ||= :filters
      end

      module Filters0
        def newline
          elements[0]
        end

        def filter
          elements[1]
        end
      end

      module Filters1
        def gutter1
          elements[0]
        end

        def filter
          elements[1]
        end

        def gutter2
          elements[3]
        end
      end

      module Filters2
        def value
          [elements[1].value] + elements[2].elements.collect do |e|
            e.elements[1].value
          end
        end
      end

      def _nt_filters
        start_index = index
        if node_cache[:filters].has_key?(index)
          cached = node_cache[:filters][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_gutter
        s0 << r1
        if r1
          r2 = _nt_filter
          s0 << r2
          if r2
            s3, i3 = [], index
            loop do
              i4, s4 = index, []
              r5 = _nt_newline
              s4 << r5
              if r5
                r6 = _nt_filter
                s4 << r6
              end
              if s4.last
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                r4.extend(Filters0)
              else
                @index = i4
                r4 = nil
              end
              if r4
                s3 << r4
              else
                break
              end
            end
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            s0 << r3
            if r3
              r7 = _nt_gutter
              s0 << r7
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Filters1)
          r0.extend(Filters2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:filters][start_index] = r0

        r0
      end

      module Filter0
        def values
          elements[1]
        end
      end

      module Filter1
        def attribute
          elements[1]
        end

        def operator
          elements[3]
        end

      end

      module Filter2
        def value
          {
            :attribute => self.attribute.value,
            :operator => self.operator.value,
            :values => elements[4].present? ? elements[4].values.value : []
          }
        end
      end

      def _nt_filter
        start_index = index
        if node_cache[:filter].has_key?(index)
          cached = node_cache[:filter][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        s1, i1 = [], index
        loop do
          r2 = _nt_ws
          if r2
            s1 << r2
          else
            break
          end
        end
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        s0 << r1
        if r1
          r3 = _nt_attribute
          s0 << r3
          if r3
            s4, i4 = [], index
            loop do
              r5 = _nt_ws
              if r5
                s4 << r5
              else
                break
              end
            end
            if s4.empty?
              @index = i4
              r4 = nil
            else
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            end
            s0 << r4
            if r4
              r6 = _nt_operator
              s0 << r6
              if r6
                i8, s8 = index, []
                s9, i9 = [], index
                loop do
                  r10 = _nt_ws
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                if s9.empty?
                  @index = i9
                  r9 = nil
                else
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                end
                s8 << r9
                if r9
                  r11 = _nt_values
                  s8 << r11
                end
                if s8.last
                  r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                  r8.extend(Filter0)
                else
                  @index = i8
                  r8 = nil
                end
                if r8
                  r7 = r8
                else
                  r7 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r7
                if r7
                  s12, i12 = [], index
                  loop do
                    r13 = _nt_ws
                    if r13
                      s12 << r13
                    else
                      break
                    end
                  end
                  r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                  s0 << r12
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Filter1)
          r0.extend(Filter2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:filter][start_index] = r0

        r0
      end

      module Attribute0
        def value
          self.text_value
        end
      end

      def _nt_attribute
        start_index = index
        if node_cache[:attribute].has_key?(index)
          cached = node_cache[:attribute][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          if has_terminal?('\G[\\w]', true, index)
            r1 = true
            @index += 1
          else
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Attribute0)
        end

        node_cache[:attribute][start_index] = r0

        r0
      end

      module Operator0
      end

      module Operator1
        def value
          self.text_value
        end
      end

      def _nt_operator
        start_index = index
        if node_cache[:operator].has_key?(index)
          cached = node_cache[:operator][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        s1, i1 = [], index
        loop do
          if has_terminal?('\G[\\S]', true, index)
            r2 = true
            @index += 1
          else
            r2 = nil
          end
          if r2
            s1 << r2
          else
            break
          end
        end
        if s1.empty?
          @index = i1
          r1 = nil
        else
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        end
        s0 << r1
        if r1
          i3 = index
          r4 = lambda {|op| Query.operators.keys.include? op[0].text_value}.call(s0)
          if r4
            @index = i3
            r3 = instantiate_node(SyntaxNode,input, index...index)
          else
            r3 = nil
          end
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Operator0)
          r0.extend(Operator1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:operator][start_index] = r0

        r0
      end

      module Values0
        def value
          elements[3]
        end
      end

      module Values1
        def value
          elements[0]
        end

      end

      module Values2
        def value
          [self.elements[0].value] + self.elements[1].elements.collect do |e|
            e.elements[3].value
          end
        end
      end

      def _nt_values
        start_index = index
        if node_cache[:values].has_key?(index)
          cached = node_cache[:values][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_value
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            s4, i4 = [], index
            loop do
              r5 = _nt_ws
              if r5
                s4 << r5
              else
                break
              end
            end
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            s3 << r4
            if r4
              if has_terminal?(',', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r6 = nil
              end
              s3 << r6
              if r6
                s7, i7 = [], index
                loop do
                  r8 = _nt_ws
                  if r8
                    s7 << r8
                  else
                    break
                  end
                end
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                s3 << r7
                if r7
                  r9 = _nt_value
                  s3 << r9
                end
              end
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(Values0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Values1)
          r0.extend(Values2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:values][start_index] = r0

        r0
      end

      def _nt_value
        start_index = index
        if node_cache[:value].has_key?(index)
          cached = node_cache[:value][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_quoted_string
        if r1
          r0 = r1
        else
          r2 = _nt_comma_delimited_string
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:value][start_index] = r0

        r0
      end

      module QuotedString0
      end

      module QuotedString1
      end

      module QuotedString2
      end

      module QuotedString3
      end

      module QuotedString4
        def value
          elements[1].text_value
        end
      end

      def _nt_quoted_string
        start_index = index
        if node_cache[:quoted_string].has_key?(index)
          cached = node_cache[:quoted_string][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        if has_terminal?("'", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r2 = nil
        end
        s1 << r2
        if r2
          s3, i3 = [], index
          loop do
            i4 = index
            i5, s5 = index, []
            i6 = index
            if has_terminal?("'", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r7 = nil
            end
            if r7
              r6 = nil
            else
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              if index < input_length
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r8 = nil
              end
              s5 << r8
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(QuotedString0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r4 = r5
            else
              if has_terminal?("\\'", false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("\\'")
                r9 = nil
              end
              if r9
                r4 = r9
              else
                @index = i4
                r4 = nil
              end
            end
            if r4
              s3 << r4
            else
              break
            end
          end
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          s1 << r3
          if r3
            if has_terminal?("'", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r10 = nil
            end
            s1 << r10
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(QuotedString1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
          r0.extend(QuotedString4)
        else
          i11, s11 = index, []
          if has_terminal?('"', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r12 = nil
          end
          s11 << r12
          if r12
            s13, i13 = [], index
            loop do
              i14 = index
              i15, s15 = index, []
              i16 = index
              if has_terminal?('"', false, index)
                r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('"')
                r17 = nil
              end
              if r17
                r16 = nil
              else
                @index = i16
                r16 = instantiate_node(SyntaxNode,input, index...index)
              end
              s15 << r16
              if r16
                if index < input_length
                  r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("any character")
                  r18 = nil
                end
                s15 << r18
              end
              if s15.last
                r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                r15.extend(QuotedString2)
              else
                @index = i15
                r15 = nil
              end
              if r15
                r14 = r15
              else
                if has_terminal?('\"', false, index)
                  r19 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('\"')
                  r19 = nil
                end
                if r19
                  r14 = r19
                else
                  @index = i14
                  r14 = nil
                end
              end
              if r14
                s13 << r14
              else
                break
              end
            end
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            s11 << r13
            if r13
              if has_terminal?('"', false, index)
                r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('"')
                r20 = nil
              end
              s11 << r20
            end
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(QuotedString3)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r0 = r11
            r0.extend(QuotedString4)
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:quoted_string][start_index] = r0

        r0
      end

      module CommaDelimitedString0
      end

      module CommaDelimitedString1
        def newline
          elements[1]
        end
      end

      module CommaDelimitedString2
      end

      module CommaDelimitedString3
        def value
          self.text_value
        end
      end

      def _nt_comma_delimited_string
        start_index = index
        if node_cache[:comma_delimited_string].has_key?(index)
          cached = node_cache[:comma_delimited_string][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          i2, s2 = index, []
          i3 = index
          i4 = index
          i5, s5 = index, []
          s6, i6 = [], index
          loop do
            r7 = _nt_ws
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s5 << r6
          if r6
            if has_terminal?(",", false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(",")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(CommaDelimitedString0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            i9, s9 = index, []
            s10, i10 = [], index
            loop do
              r11 = _nt_ws
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s9 << r10
            if r10
              r12 = _nt_newline
              s9 << r12
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(CommaDelimitedString1)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r4 = r9
            else
              @index = i4
              r4 = nil
            end
          end
          if r4
            r3 = nil
          else
            @index = i3
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s2 << r3
          if r3
            if index < input_length
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r13 = nil
            end
            s2 << r13
          end
          if s2.last
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
            r2.extend(CommaDelimitedString2)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r1 = r2
          else
            if has_terminal?('\,', false, index)
              r14 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('\,')
              r14 = nil
            end
            if r14
              r1 = r14
            else
              @index = i1
              r1 = nil
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(CommaDelimitedString3)
        end

        node_cache[:comma_delimited_string][start_index] = r0

        r0
      end

      def _nt_ws
        start_index = index
        if node_cache[:ws].has_key?(index)
          cached = node_cache[:ws][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?(" ", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(" ")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          if has_terminal?("\t", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\t")
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:ws][start_index] = r0

        r0
      end

      def _nt_newline
        start_index = index
        if node_cache[:newline].has_key?(index)
          cached = node_cache[:newline][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          if has_terminal?("\n", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r2 = nil
          end
          if r2
            r1 = r2
          else
            if has_terminal?("\r\n", false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("\r\n")
              r3 = nil
            end
            if r3
              r1 = r3
            else
              @index = i1
              r1 = nil
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        end

        node_cache[:newline][start_index] = r0

        r0
      end

      def _nt_gutter
        start_index = index
        if node_cache[:gutter].has_key?(index)
          cached = node_cache[:gutter][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          if has_terminal?('\G[\\s]', true, index)
            r1 = true
            @index += 1
          else
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

        node_cache[:gutter][start_index] = r0

        r0
      end

    end

    class QueryLanguageParser < Treetop::Runtime::CompiledParser
      include QueryLanguage
    end

  end
end